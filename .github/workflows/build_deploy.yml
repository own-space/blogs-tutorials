name: Packer with Terraform

env:
  NEW_IMAGE: ${{ secrets.NEW_IMAGE }}
  test_message: "I'm a test_message"
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches:
      â€“ develop
      - main
      - feature/uat

jobs:
  packer_build:
    runs-on: ubuntu-latest
    steps:
      # extract branch name
      - name: Extract branch name
        if: 
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo ${{ github }}
          echo ${{ github.head_ref }}
        id: extract_branch
      - name: Get branch name
        run: echo 'The branch name is' ${{ steps.extract_branch.outputs.branch }}
      - name: Mock github context #https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
        run: |
          echo 'The owner and repository name of the action(step executing): ' ${{ github.action_repository }}
          echo 'The URL of the GitHub REST API:' ${{ github.api_url }}
          echo 'Target branch of the pull request in a workflow run": ' ${{ github.base_ref }}
          echo 'The head_ref or source branch of the pull request: ' ${{ github.head_ref }}
          echo 'The job_id of the current job: ' ${{ github.job }}
          echo 'The branch or tag ref that triggered the workflow run: ' ${{ github.ref }}
          echo 'The branch or tag name that triggered the workflow run: ' ${{ github.ref_name }}
          echo 'The owner and repository name: ' ${{ github.repository }}
          echo 'The repository URL: ' ${{ github.repositoryUrl }} ' from ' ${{ github.server_url }}
          echo 'Thank you!'
      - uses: actions/checkout@v1
      - name: Packer build on AWS
        uses: ExitoLab/packer_build_action_aws@v0.2.10
        with:
          templateFile: 'packer.json'
          workingDir: 'ami'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          GITHUB_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          NEW_SECRET: ${{ secrets.APP_SECRET }}
          DJANGO_SECRET_KEY: ${{ secrets.APP_SECRET }}
          GITHUB_SHA: ${{ github.sha }}
          DB_APP_USER: ${{secrets.DB_APP_USER}}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_AUTH: ${{ secrets.DB_AUTH }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_PWD: ${{ secrets.DB_PWD }}
        
  terraform_deploy:
    runs-on: ubuntu-latest
    environment: production

    needs: packer_build

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform_files

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      # with:
      #   path: .
      #   url: ${{ github.workflow.repository.url }}
      #   revision: ${{ github.sha }}
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve